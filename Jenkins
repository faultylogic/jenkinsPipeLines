publish = false

pipeline {
    agent any

    environment {
        changelist = defineReleaseType()

        emailRecipients = 'benjamin.goulet@cra-arc.gc.ca'

        deploymentKey = '<Deployment Key Given to you from the AMT>'
    }

    stages {
        stage('Build POM Data') {
            steps('Build POM Data') {

                script {
 
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application using Maven (pom.xml)'

            }
        }

        stage('Unit & Integration Tests') {
            steps {
                echo 'Unit & Integration Tests'

            }
        }

        stage('Quality Analysis') {
            steps {
                echo 'Running SonarQube Analysis'

            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    script {

                    }
                }
            }
        }

        stage('Publish binary Authorization') {
            when {
                beforeInput true

                expression { BRANCH_NAME ==~ /(dev|master)/ }
            }

            steps {
                script {
                    def proceed = true

                    try {
                        timeout(time: 15, unit: 'SECONDS') {
                            input(message: 'Deploy this build to Artifactory?')
                        }
                    } catch (err) {
                        proceed = false

                        echo '****** build was not pushed to artifactory *******'
                    }

                    if (proceed) {
                        updateShouldPublish(true)
                    }
                }
            }
        }

        stage('Publish binary') {
            when {
                beforeInput true

                expression {
                    script {
                    }
                }
            }

            steps {
                echo 'Publishing release binary repository manager (Artifactory)'


                script {
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }

        success {
            sendEmail('Successful')
        }

        unstable {
            sendEmail('Unstable')
        }

        failure {
            sendEmail('Failed')
        }
    }
}

@NonCPS

def getChangeString() {

    MAX_MSG_LEN = 100

    def changeString = ''

    echo 'Gathering SCM changes'

    def changeLogSets = currentBuild.changeSets

    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items

        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]

            truncated_msg = entry.msg.take(MAX_MSG_LEN)

            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = ' - No new changes'
    }

    return changeString
}

def shouldPublish() {
    return publish
}

def updateShouldPublish(flag) {
    publish = flag
}

def defineReleaseType() {
    if (env.BRANCH_NAME == 'master') {
        return 'RELEASE'
    } else {
        return 'DEV'
    }
}

def sendEmail(status) {
    mail(

        to: "$emailRecipients",

        subject: "[JENKINS] Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",

        body: 'Changes:\n ' + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + '\n')
}
