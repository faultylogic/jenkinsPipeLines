publish = false

pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    environment {
        changelist = defineReleaseType()
        emailRecipients = 'benjamin.goulet@cra-arc.gc.ca'
        deploymentKey = '<Deployment Key Given to you from the AMT>'
    }

    stages {
        stage('Build POM Data') {
            steps('Build POM Data') {
                sh 'mvn -N help:effective-pom -Doutput=target/pom-effective.xml'

                script {
                    pom = readMavenPom file: 'target/pom-effective.xml'
                    projectArtifactId = pom.getArtifactId()
                    projectVersion = pom.getVersion()
                    currentBuild.displayName = projectArtifactId + ' - ' + projectVersion + "(${currentBuild.number})"
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application using Maven (pom.xml)'
                sh "mvn clean package -P ${changelist} -Dskip.unit.tests=true"
            }
        }

        stage('Unit & Integration Tests') {
            steps {
                echo 'Unit & Integration Tests'
                sh 'mvn test -Dskip.unit.tests=false'
            }
        }

        stage('Quality Analysis') {
            steps {
                sleep(time:3, unit:'SECONDS')
            }
        }

        stage('Quality Gate') {
            steps {
                sleep(time:3, unit:'SECONDS')
            }
        }

        stage('Publish binary Authorization') {
            steps {
                sleep(time:3, unit:'SECONDS')
            }
        }

        stage('Publish binary') {
            steps {
                echo 'Publishing release binary repository manager (Artifactory)'
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}

def shouldPublish() {
    return publish
}

def updateShouldPublish(flag) {
    publish = flag
}

def defineReleaseType() {
    if (env.BRANCH_NAME == 'master') {
        return 'RELEASE'
    } else {
        return 'DEV'
    }
}
